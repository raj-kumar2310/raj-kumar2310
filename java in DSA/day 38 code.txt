Single File Programming Question
Problem Statement



A computing system executes multiple tasks simultaneously. Your task is to implement a priority queue that prioritizes these tasks based on their importance and urgency.



The priority queue should prioritize tasks based on the following criteria:

Tasks with higher priority should be executed first.
In the case of tasks with equal priority, tasks with earlier deadlines should be executed first.


Your goal is to implement a custom priority queue using an array-based data structure. 



The priority queue should support the following operations:

push(task): Inserts a new task into the priority queue according to the priority and deadline criteria.
pop(): Removes and returns the highest-priority task from the priority queue.


Note: A higher integer specifies high priority.

Input format :
The first line of the input consists of an integer N, the number of tasks to be executed by the computing system.

The following N lines of the input contain task details in the following format: priority deadline taskName

where the priority is an integer representing the priority of the task, the deadline is an integer representing the deadline of the task, and taskName is a string representing the name of the task.

Output format :
The output prints a list of tasks executed by the computing system, in the order they were executed.



Refer to the sample output for the exact text and format.

Code constraints :
1 ≤ N ≤ 20

1 ≤ priority ≤ 109

1 ≤ deadline ≤ 109

Sample test cases :
Input 1 :
4
5 1 Task1
1 2 Task2
4 2 Task3
6 1 Task4
Output 1 :
Executed Tasks:
Task4
Task1
Task3
Task2
Input 2 :
4
100 4 Task1
100 2 Task2
100 3 Task3
100 1 Task4
Output 2 :
Executed Tasks:
Task4
Task2
Task3
Task1

ANS:

// You are using Java
import java.util.*;

class Task
{
    int pri;
    int dead;
    String name;
    
    Task(int pri,int dead,String name)
    {
        this.pri=pri;
        this.dead=dead;
        this.name=name;
    }
}

class priQue{
    private List<Task> tasks;
    
    priQue()
    {
        tasks = new ArrayList<>();
    }
    void push(Task t)
    {
        tasks.add(t);
    }
    
    Task pop()
    {
        if(tasks.isEmpty()) return null;
        
        int bestIndex=0;
        for(int i=0;i<tasks.size();i++)
        {
            Task curr=tasks.get(i);
            Task best = tasks.get(bestIndex);
            
            if(curr.pri>best.pri || (curr.pri == best.pri && curr.dead < best.dead))
            {
                bestIndex=i;
            }
        }
        return tasks.remove(bestIndex);
    }
    boolean isEmpty()
    {
        return tasks.isEmpty();
    }
}
public class Main
{
    public static void main(String args[]){
 Scanner sc=new Scanner(System.in);
 int n=sc.nextInt();
 priQue pq=new priQue();
 
 for(int i=0;i<n;i++)
 {
     int pri=sc.nextInt();
     int dead=sc.nextInt();
     String name=sc.next();
     
     pq.push(new Task(pri,dead,name));
 }
 System.out.println("Executed Tasks:");
 while(!pq.isEmpty())
 {
     Task executed =pq.pop();
     System.out.println(executed.name);
 }
    
}}